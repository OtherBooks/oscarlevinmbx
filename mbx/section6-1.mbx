<section>
<title>Basics</title>
<activity> 
<exercises>

<exercise>
<statement>
<p>
Which (if any) of the graphs below are the same?
</p>

<p>

<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (0,0);
\coordinate (C) at (1,0);
\coordinate (D) at (-.5,1);
\coordinate (E) at (.5,1);
</p>

<p>
\draw (A) -- (D) -- (B) -- (E) -- (C) -- (D) (A) -- (E);
\foreach \x in {(A), (B), (C), (D), (E)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (90+360/5:1);
\coordinate (B) at (90+2*360/5:1);
\coordinate (C) at (90+3*360/5:1);
\coordinate (D) at (90+4*360/5:1);
\coordinate (E) at (90:1);
</p>

<p>
\draw (A) -- (B) -- (C) -- (D) -- (E) -- (A);
\foreach \x in {(A), (B), (C), (D), (E)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (0,1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,-1);
\coordinate (E) at (1,0);
</p>

<p>
\draw (A) -- (B) -- (E) -- (C) -- (A) -- (D) -- (E);
\foreach \x in {(A), (B), (C), (D), (E)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (90+360/5:1);
\coordinate (B) at (90+2*360/5:1);
\coordinate (C) at (90+3*360/5:1);
\coordinate (D) at (90+4*360/5:1);
\coordinate (E) at (90:1);
</p>

<p>
\draw (A) -- (C) -- (E) -- (B) -- (D) -- (A);
\foreach \x in {(A), (B), (C), (D), (E)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (0,1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,-1);
\coordinate (E) at (1,0);
</p>

<p>
\draw (A) -- (C) -- (B) (D) -- (C) -- (E);
\foreach \x in {(A), (B), (C), (D), (E)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<nbsp />
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
The graphs above are unlabeled. Usually we think of a graph as having a specific set of vertices. Which (if any) of the graphs below are the same?
</p>

<p>

<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);
</p>

<p>
\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[below] {\(c\)} -- (D) node[above] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);
</p>

<p>
\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[above] {\(c\)} -- (D) node[below] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);
</p>

<p>
\draw (A) node[below] {\(a\)} -- (B) node[above] {\(c\)} -- (C) node[below] {\(e\)} -- (D) node[above] {\(b\)} -- (E) node[below] {\(d\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);
</p>

<p>
\draw (A) node[below] {\(v_6\)} -- (B) node[above] {\(v_1\)} -- (C) node[above] {\(v_2\)} -- (D) node[below] {\(v_5\)} -- (E) node[below] {\(v_4\)} -- (F) node[above] {\(v_3\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}]]></latex-image-code>
</image>

</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Actually, all the graphs we have seen above are just <em>drawings</em> of graphs. A graph is really an abstract mathematical object consisting of two sets <m>V</m> and <m>E</m> where <m>E</m> is a set of 2-element subsets of <m>V</m>.
</p>

<p>
Are the graphs below the same or different?
</p>

<ul>
<li class="custom-list-style-type" label="Graph 1:" ><m>V = \{a, b, c, d, e\}</m>, <m>E = \{\{a,b\}, \{a, c\}, \{a,d\}, \{a,e\}, \{b,c\}, \{d,e\}\}</m>.</li>
<li class="custom-list-style-type" label="Graph 2:" ><m>V = \{v_1, v_2, v_3, v_4, v_5\}</m>,<br /> <m>E = \{\{v_1, v_3\}, \{v_1, v_5\}, \{v_2, v_4\}, \{v_2, v_5\}, \{v_3, v_5\}, \{v_4, v_5\}\}</m>.</li>
</ul>
</statement>
</exercise>

</exercises>
 
</activity>
<p>
While we almost always think of graphs as pictures, these are really just visual representations of mathematical objects. In fact, a graph is simply a set of vertices some pairs of which are <q>related</q> by an edge. For example, we can describe a particular graph like this: the vertices are the letters <m>\{a,b,c,d\}</m> and the edges are the pairs
<me>
  \{\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\}\}.
</me>
</p>

<p>
We could have described the graph in words as follows: we have four vertices, <m>a</m>, <m>b</m>, <m>c</m>, and <m>d</m>, and <m>a</m> is adjacent to <m>b</m> and <m>c</m>, <m>b</m> is adjacent to both <m>c</m> and <m>d</m>, and <m>c</m> is also adjacent to <m>d</m>. One way to draw this graph is this:
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=0.7]
    \draw  (-1,1) \vl{\(a\)} -- (1,1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,-1) \vr{\(d\)} -- (1,1) -- (-1,-1);
  \end{tikzpicture}]]></latex-image-code>
</image>
<p>
However we could also have drawn the graph differently. For example either of these:
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=0.7]
    \draw  (-1,1) \vl{\(a\)} -- (1,-1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,1) \vr{\(d\)} -- (1,-1) -- (-1,-1);
  \end{tikzpicture}]]></latex-image-code>
</image>
\hspace{1in}
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=0.7]
    \draw  (-1.5,0) \vb{\(a\)} -- (-.5,0) \vb{\(b\)} (-1.5,0) .. controls (-.5,1) .. (.5,0) \vb{\(c\)} -- (1.5,0) \vb{\(d\)} .. controls (.5,1) .. (-.5,0) -- (.5,0);
  \end{tikzpicture}]]></latex-image-code>
</image>
<p>
We should be careful about what it means for two graphs to be <q>the same.</q> Remember, as mathematical objects, graphs are just sets. Two sets are equal if they have the exact same members. However, even if two graphs are not <em>equal</em>, they might be <em>basically</em> the same. Graphs that are basically the same (but perhaps not equal) are called <em>isomorphic</em>. We will give a precise definition of this term after a quick example:
</p>
<example>
<statement>
<p>
Consider the graphs:
</p>

<p>
<m>G_1 = \{V_1, E_1\}</m> where <m>V_1 = \{a, b, c\}</m> and <m>E_1 = \{\{a,b\}, \{a,c\}, \{b,c\}\}</m>;
</p>

<p>
<m>G_2 = \{V_2, E_2\}</m> where <m>V_2 = \{u,v,w\}</m> and <m>E_2 = \{\{u,v\}, \{u,w\}, \{v,w\}\}</m>.
</p>

<p>
Are these graphs the same?
</p>
</statement>
<solution>
<p>
The two graphs are NOT equal. It is enough to notice that <m>V_1 \ne V_2</m> since <m>a \in V_1</m> but <m>a \notin V_2</m>. However, both of these graphs consist of three vertices with edges connecting every pair of vertices. We can draw them as follows:
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\draw  (90:1) \va{\(a\)} -- (210:1) \vl{\(b\)} -- (-30:1) \vr{\(c\)} -- (90:1);
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\draw  (90:1) \va{\(u\)} -- (210:1) \vl{\(v\)} -- (-30:1) \vr{\(w\)} -- (90:1);
\end{tikzpicture}]]></latex-image-code>
</image>
<p>
Clearly we want to say these graphs are basically the same, so while they are not equal, they will be <em>isomorphic</em>. The reason is we can rename the vertices of one graph and get the second graph as the result.
</p>
</solution>
</example>
<p>
Intuitively, graphs are <em>isomorphic</em><index><main>isomorphic</main></index> if they are basically the same, or better yet, if they are the same except for the names of the vertices. To make the concept of renaming vertices precise, we give the following definitions:
</p>
<convention>
<title>Isomorphic Graphs</title>
<p>
<index><main>isomorphic</main></index>
An <term>isomorphism</term><index><main>isomorphism</main></index> between two graphs <m>G_1</m> and <m>G_2</m> is a bijection <m>f:V_1 \to V_2</m> between the vertices of the graphs such that if <m>\{a,b\}</m> is an edge in <m>G_1</m> then <m>\{f(a), f(b)\}</m> is an edge in <m>G_2</m>.
</p>

<p>
Two graphs are <term>isomorphic</term> if there is an isomorphism between them. In this case we write <m>G_1 \isom G_2</m>.
</p>
</convention>
<p>
An isomorphism is simply a function which renames the vertices. It must be a bijection so every vertex gets a new name. These newly named vertices must be connected by edges precisely if they were connected by edges with their old names.
</p>
<example>
<statement>
<p>
Decide whether the graphs <m>G_1 = \{V_1, E_1\}</m> and <m>G_2 = \{V_2, E_2\}</m> are equal or isomorphic.
</p>

<p>
<m>V_1 = \{a,b,c,d\}</m>, <m>E_1 = \{\{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}\}</m>
</p>

<p>
<m>V_2 = \{a,b,c,d\}</m>, <m>E_2 = \{\{a,b\}, \{a,c\}, \{b,c\}, \{c,d\}\}</m>
</p>
</statement>
<solution>
<p>
The graphs are NOT equal, since <m>\{a,d\} \in E_1</m> but <m>\{a,d\} \notin E_2</m>. However, since both graphs contain the same number of vertices and same number of edges, they <em>might</em> be isomorphic (this is not enough in most cases, but it is a good start).
</p>

<p>
We can try to build an isomorphism. How about we say <m>f(a) = b</m>, <m>f(b) = c</m>, <m>f(c) = d</m> and <m>f(d) = a</m>. This is definitely a bijection, but to make sure that the function is an isomorphism, we must make sure it <em>respects the edge relation</em>. In <m>G_1</m>, vertices <m>a</m> and <m>b</m> are connected by an edge. In <m>G_2</m>, <m>f(a) = b</m> and <m>f(b) = c</m> are connected by an edge. So far, so good, but we must check the other three edges. The edges <m>\{a,c\}</m> in <m>G_1</m> corresponds to <m>\{f(a), f(c)\} = \{b,d\}</m>, but here we have a problem. There is no edge between <m>b</m> and <m>d</m> in <m>G_2</m>. Thus <m>f</m> is NOT an isomorphism.
</p>

<p>
Not all hope is lost, however. Just because <m>f</m> is not an isomorphism does not mean that there is no isomorphism at all. We can try again. At this point it might be helpful to draw the graphs to see how they should match up. Alternatively, notice that in <m>G_1</m>, the vertex <m>a</m> is adjacent to every other vertex. In <m>G_2</m>, there is also a vertex with this property: <m>c</m>. So build the bijection <m>g:V_1 \to V_2</m> by defining <m>g(a) = c</m> to start with. Next, where should we send <m>b</m>? In <m>G_1</m>, the vertex <m>b</m> is only adjacent to vertex <m>a</m>. There is exactly one vertex like this in <m>G_2</m>, namely <m>d</m>. So let <m>g(b) = d</m>. As for the last two, in this example, we have a free choice: let <m>g(c) = b</m> and <m>g(d) = a</m> (switching these would be fine as well).
</p>

<p>
We should check that this really is an isomorphism. It is definitely a bijection. We must make sure that the edges are respected. The four edges in <m>G_1</m> are
<me>
  \{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}
</me>
</p>

<p>
Under the proposed isomorphism these become
<me>
  \{g(a), g(b)\}, \{g(a), g(c)\}, \{g(a), g(d)\}, \{g(c), g(d)\}
</me>
</p>
<me>
  \{c,d\}, \{c,b\}, \{c,a\}, \{b,a\}
</me>
<p>
which are precisely the edges in <m>G_2</m>. Thus <m>g</m> is an isomorphism, so <m>G_1 \cong G_2</m>
</p>
</solution>
</example>
<p>
Sometimes we will talk about a graph with a special name (like <m>K_n</m> or the <em>Peterson graph</em>) or perhaps draw a graph without any labels. In this case we are really referring to <em>all</em> graphs isomorphic to any copy of that particular graph. A collection of isomorphic graphs is often called an <em>isomorphism class</em><index><main>isomorphism class</main></index>.<fn>This is not unlike geometry, where we might have more than one copy of a particular triangle.  There instead of <em>isomorphic</em> we say <em>congruent</em>.</fn>
</p>

<p>
Back to some basic graph theory definitions. Notice that the graphs above have the property that no pair of vertices is connected more than once, and no vertex is connected to itself. Graphs like these are sometimes called <em>simple</em>, although we will just call them <em>graphs</em>. This is because our definition for a graph says that the edges form a set of 2-element subsets of the vertices. Remember that it doesn't make sense to say a set contains an element more than once. So no pair of vertices can be connected by an edge more than once. Also, since each edge must be a set containing two vertices, we cannot have a single vertex connected to itself by an edge.
</p>

<p>
That said, there are times we want to consider double (or more) edges and single edge loops. For example, the <q>graph</q> we drew for the Bridges of K&#xf6;nigsberg problem had double edges because there really are two bridges connecting a particular island to the near shore. We will call these objects <em>multigraphs</em><index><main>multigraph</main></index>. This is a good name: a <em>multiset</em> is a set in which we are allowed to include a single element multiple times.
</p>

<p>
The graphs above are also <em>connected</em><index><main>connected</main></index>: you can get from any vertex to any other vertex by following some path of edges. A graph that is not connected can be thought of as two separate graphs drawn close together. Unless otherwise stated, we will assume all our graphs are connected.
</p>

<p>
Vertices in a graph do not always have edges between them. If we add all possible edges, then the resulting graph is called <em>complete</em><index><main>complete graph</main></index>. That is, a graph is complete if every pair of vertices is connected by an edge. Since a graph is determined completely by which vertices are adjacent to which other vertices, there is only one complete graph with a given number of vertices. We give these a special name: <m>\Kn</m><index><main><m>\Kn</m></main></index> is the complete graph on <m>n</m> vertices.
</p>

<p>
Each vertex in <m>K_n</m> is adjacent to <m>n-1</m> other vertices. We call the number of edges emanating from a given vertex the <em>degree</em> of that vertex. So every vertex in <m>K_n</m> has degree <m>n-1</m>. How many edges does <m>K_n</m> have? One might think the answer should be <m>n(n-1)</m>, since we count <m>n-1</m> edges <m>n</m> times (once for each vertex). However, each edge is incident to 2 vertices, so we counted every edge exactly twice. Thus there are <m>n(n-1)/2</m> edges in <m>K_n</m>.
Alternatively, we can say there are <m>{n \choose 2}</m> edges, since to draw an edge we must choose 2 of the <m>n</m> vertices.
</p>

<p>
In general, if we know the degrees of all the vertices in a graph, we can find the number of edges. The sum of the degrees of all vertices will always be <u>twice</u> the number of edges, since each edge adds to the degree of two vertices. Notice this means that the sum of the degrees of all vertices in any graph must be even!
</p>
<example>
<statement>
<p>
At a recent math seminar, 9 mathematicians greeted each other by shaking hands. Is it possible that each mathematician shook hands with exactly 7 people at the seminar?
</p>
</statement>
<solution>
<p>
It seems like this should be possible. Each mathematician chooses one person to not shake hands with. But this cannot happen. We are asking whether a graph with 9 vertices can have each vertex have degree 7. If such a graph existed, the sum of the degrees of the vertices would be <m>9\cdot 7 = 63</m>. This would be twice the number of edges (handshakes) resulting in a graph with <m>31.5</m> edges. That is impossible. Thus at least one (in fact an odd number) of the mathematicians must have shaken hands with an <em>even</em> number of people at the seminar.
</p>
</solution>
</example>
<p>
One final definition: we say a graph is <em>bipartite</em><index><main>bipartite</main></index> if the vertices can be divided into two sets, <m>A</m> and <m>B</m>, with no two vertices in <m>A</m> adjacent and no two vertices in <m>B</m> adjacent. The vertices in <m>A</m> can be adjacent to some or all of the vertices in <m>B</m>. If each vertex in <m>A</m> is adjacent to all the vertices in <m>B</m>, then the graph is a <em>complete bipartite graph</em>, and gets a special name: <m>K_{m,n}</m>, where <m>|A| = m</m> and <m>|B| = n</m>. The graph in the houses and utilities puzzle is <m>K_{3,3}</m>.
</p>
<convention>
<title>Named Graphs</title>
<p>
Some graphs are used more than others, and get special names.
</p>

<ul>
<li class="custom-list-style-type" label="" ><m>\Kn</m><index><main><m>\Kn</m></main></index>: the complete graph on <m>n</m> vertices.</li>
<li class="custom-list-style-type" label="" ><m>\Kmn</m><index><main><m>\Kmn</m></main></index>: the complete bipartite graph with sets of <m>m</m> and <m>n</m> vertices.</li>
<li class="custom-list-style-type" label="" ><m>\Cn</m><index><main><m>\Cn</m></main></index>: the cycle graph on <m>n</m> vertices, just one big loop.</li>
<li class="custom-list-style-type" label="" ><m>\Pn</m><index><main><m>\Pn</m></main></index>: the path graph on <m>n</m> vertices, just one long path.</li>
</ul>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=\sb+.05]
  \path (0,.9) +(18:1) coordinate (a);
  \path (0,.9) +(90:1) coordinate (b);
  \path (0,.9) +(162:1) coordinate (c);
  \path (0,.9) +(234:1) coordinate (d);
  \path (0,.9) +(306:1) coordinate (e);
  \draw  (a) \v -- (b) \v -- (c) \v -- (d) \v -- (e) \v -- (a) -- (c) -- (e) -- (b) -- (d) -- (a);
  \draw (0,-.5) node[below]{ \(K_5\)};
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=\sb, xscale=1.5]
 \draw  (-1, 0) \v -- (-.5,2) \v -- (0,0) \v -- (.5, 2) \v -- (1,0) \v -- (-.5,2) (.5,2) -- (-1,0);
 \draw (0,-.5) node[below]{ \(K_{2,3}\)};
  \end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=\sb]
  \draw  (0:1) \v -- (60:1) \v -- (120:1) \v -- (180:1) \v -- (240:1) \v -- (300:1) \v -- cycle;
  \draw (270:1.5) node[below]{ \(C_6\)};
\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=\sb]
  \draw  (-2,0) \v -- (-1,.5) \v -- (0,0) \v -- (1,.75) \v -- (.5,1.5) \v -- (2,2) \v;
  \draw (0,-.5) node[below]{ \(P_6\)};
\end{tikzpicture}]]></latex-image-code>
</image>
<nbsp /> 
</convention>
  
<convention>
<title>Graph Theory Definitions</title>
<p>
<term>Graph</term><index><main>graph</main></index>: A collection of <term>vertices</term>, some of which are connected by <term>edges</term>. More precisely, a pair of sets <m>V</m> and <m>E</m> where <m>V</m> is a set of vertices and <m>E</m> is a set of 2-element subsets of <m>V</m>.
</p>

<p>
<term>Adjacent</term><index><main>adjacent</main></index>: Two vertices are <term>adjacent</term> if they are connected by an edge. Two edges are <term>adjacent</term> if they share a vertex.
</p>

<p>
<term>Bipartite graph</term><index><main>bipartite</main></index>: A graph for which it is possible to divide the vertices into two disjoint sets such that there are no edges between any two vertices in the same set.
</p>

<p>
<term>Complete bipartite graph</term>: A bipartite graph for which every vertex in the first set is adjacent to every vertex in the second set.
</p>

<p>
<term>Complete graph</term><index><main>complete graph</main></index>: A graph in which every pair of vertices is adjacent.
</p>

<p>
<term>Connected</term><index><main>connected</main></index>: A graph is <term>connected</term> if there is a path from any vertex to any other vertex.
</p>

<p>
<term>Chromatic number</term><index><main>chromatic number</main></index>: The minimum number of colors required in a proper vertex coloring of the graph.
</p>

<p>
<term>Cycle</term><index><main>cycle</main></index>: A path (see below) that starts and stops at the same vertex, but contains no other repeated vertices.
</p>

<p>
<term>Degree of a vertex</term><index><main>degree</main></index>: The number of edges incident to a vertex.
</p>

<p>
<term>Euler path</term>: A path which uses each edge exactly once.
</p>

<p>
<term>Euler circuit</term><index><main>Euler path</main></index>: An Euler path which starts and stops at the same vertex.
</p>

<p>
<term>Multigraph</term><index><main>multigraph</main></index>: A <term>multigraph</term> is just like a graph but can contain multiple edges between two vertices as well as single edge loops (that is an edge from a vertex to itself).
</p>

<p>
<term>Path</term><index><main>path</main></index>: A sequence of vertices such that consecutive vertices (in the sequence) are adjacent (in the graph). A path in which no vertex is repeated is called <term>simple</term>.
</p>

<p>
<term>Planar</term><index><main>planar</main></index>: A graph which can be drawn (in the plane) without any edges crossing.
</p>

<p>
<term>Subgraph</term><index><main>subgraph</main></index>: We say that <m>H</m> is a <term>subgraph</term> of <m>G</m> if every vertex and edge of <m>H</m> is also a vertex or edge of <m>G</m>. We say <m>H</m> is an <term>induced</term> subgraph of <m>G</m> if every vertex of <m>H</m> is a vertex of <m>G</m> and each pair of vertices in <m>H</m> are adjacent in <m>H</m> if and only if they are adjacent in <m>G</m>.
</p>

<p>
<term>Tree</term><index><main>tree</main></index>: A (connected) graph with no cycles. (A non-connected graph with no cycles is called a <term>forest</term>.) The vertices in a tree with degree 1 are called <term>leaves</term>.
</p>

<p>
<term>Vertex coloring</term><index><main>vertex coloring</main></index>: An assignment of colors to each of the vertices of a graph. A vertex coloring is <term>proper</term> if adjacent vertices are always colored differently.
</p>
</convention>
  
<exercises>

<exercise>
<statement>
<p>
If 10 people each shake hands with each other, how many handshakes took place? What does this question have to do with graph theory?
</p>
</statement>
<answer>
<p>
This is asking for the number of edges in <m>K_{10}</m>. Each vertex (person) has degree (shook hands with) 9 (people). So the sum of the degrees is <m>90</m>. However, the degrees count each edge (handshake) twice, so there are 45 edges in the graph. That is how many handshakes took place.
</p>
</answer>
</exercise>

<exercise>
<statement>
<p>
Among a group of 5 people, is it possible for everyone to be friends with exactly 2 of the people in the group? What about 3 of the people in the group?
</p>
</statement>
<answer>
<p>
It is possible for everyone to be friends with exactly 2 people. You could arrange the 5 people in a circle and say that everyone is friends with the two people on either side of them (so you get the graph <m>C_5</m>). However, it is not possible for everyone to be friends with 3 people. That would lead to a graph with an odd number of odd degree vertices which is impossible since the sum of the degrees must be even.
</p>
</answer>
</exercise>

<exercise>
<statement>
<p>
Is it possible for two <em>different</em> (non-isomorphic) graphs to have the same number of vertices and the same number of edges? What if the degrees of the vertices in the two graphs are the same (so both graphs have vertices with degrees 1, 2, 2, 3, and 4, for example)? Draw two such graphs or explain why not.
</p>
</statement>
<answer>
<p>
Yes. For example, both graphs below contain 6 vertices, 7 edges, and have degrees (2,2,2,2,3,3).
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
		   \draw[thick] (-2,0) \v -- (-1,0) \v -- (-1.5,1) \v -- (-2,0) (-1.5,1) -- (1.5, 1) \v -- (1,0) \v -- (2,0) \v -- (1.5,1);  
		  \end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
		  \foreach \x in {0,...,5}
		    \draw[thick] (\x*60:1) \v -- (\x*60 + 60:1);
		    \draw[thick] (0:1) -- (180:1);
		  \end{tikzpicture}]]></latex-image-code>
</image>
<nbsp /> </answer>
</exercise>

<exercise>
<statement>
<p>
Are the two graphs below equal? Are they isomorphic? If they are isomorphic, give the isomorphism.
</p>

<p>
Graph 1: <m>V = \{a,b,c,d,e\}</m>, <m>E = \{\{a,b\}, \{a,c\}, \{a,e\}, \{b,d\}, \{b,e\}, \{c,e\}\}</m>.
</p>

<p>
Graph 2:
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
\foreach \x in {0,...,4} {
	\coordinate (v\x) at (90-72*\x:.75);}
\draw (v3) \vl{\(d\)} -- (v0) \vr{\(a\)} -- (v2) \vr{\(c\)} -- (v1) \vr{\(b\)} -- (v4) \vl{\(e\)} -- (v3) -- (v2);
\end{tikzpicture}]]></latex-image-code>
</image>
.
</p>
</statement>
<answer>
<p>
The graphs are not equal. For example, graph 1 has an edge <m>\{a,b\}</m> but graph 2 does not have that edge. They are isomorphic. One possible isomorphism is <m>f:G_1 \to G_2</m> defined by <m>f(a) = d</m>, <m>f(b) = c</m>, <m>f(c) = e</m>, <m>f(d) = b</m>, <m>f(e) = a</m>.
</p>
</answer>
</exercise>

<exercise>
<statement>
<p>
Which of the graphs below are bipartite?
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
    \draw (-1,1) \v -- (0,2) \v -- (1,1) \v -- (0,0) \v -- (-1,1) -- (0,1) \v -- (1,1);
  \end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
    \draw (0:1) \v -- (120:1) \v -- (60:1) \v -- (300:1) \v -- (180:1) \v -- (240:1) \v -- cycle;
  \end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
    \draw (360/7:1) \v -- (2*360/7:1) \v -- (3*360/7:1) \v -- (4*360/7:1) \v -- (5*360/7:1) \v -- (6*360/7:1) \v -- (0:1) \v -- cycle;
  \end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
    \draw (0,0) \v;
    \foreach \x in {0,...,7}
    \draw (0,0) -- (\x*360/8:1) \v;
  \end{tikzpicture}]]></latex-image-code>
</image>
</statement>
<answer>
<p>
Three of the graphs are bipartite. The one which is not is <m>C_7</m> (second from the right).
</p>
</answer>
</exercise>

<exercise>
<statement>
<p>
For which <m>n</m> is the graph <m>C_n</m> bipartite?
</p>
</statement>
<answer>
<p>
<m>C_n</m> is bipartite if and only if <m>n = 1</m> or is even.
</p>
</answer>
</exercise>

<exercise>
<statement>
<p>
For each of the following, try to give two <u>different</u> unlabeled graphs with the given properties, or explain why doing so is impossible.
</p>

<ol>
<li>
<p>
Two different trees with the same number of vertices and the same number of edges.  A tree is a connected graph with no cycles.
</p>
</li>
<li>
<p>
Two different graphs with 8 vertices all of degree 2.
</p>
</li>
<li>
<p>
Two different graphs with 5 vertices all of degree 4.
</p>
</li>
<li>
<p>
Two different graphs with 5 vertices all of degree 3.
</p>
</li>
</ol>
</statement>
<answer>
<ol>
<li>
<p>
For example:
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
			\draw (0,0) \v -- (-1,1) \v (0,0) -- (0,1) \v (0,0) -- (1,1) \v;
		\end{tikzpicture}]]></latex-image-code>
</image>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}
			\draw (0,0) \v -- (-1,1) \v (0,0) -- (.5,.5) \v -- (1,1) \v;
		\end{tikzpicture}]]></latex-image-code>
</image>

</p>
</li>
<li>
<p>
This is not possible if we require the graphs to be connected.  If not, we could take <m>C_8</m> as one graph and two copies of <m>C_4</m> as the other.
</p>
</li>
<li>
<p>
Not possible.  If you have a graph with 5 vertices all of degree 4, then every vertex must be adjacent to every other vertex.  This is the graph <m>K_5</m>.
</p>
</li>
<li>
<p>
This is not possible.  In fact, there is not even one graph with this property (such a graph would have <m>5\cdot 3/2 = 7.5</m> edges).
</p>
</li>
</ol>
</answer>
</exercise>

</exercises>
</section>
